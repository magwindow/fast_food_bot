import os
from dotenv import load_dotenv

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto, LabeledPrice
from aiogram.filters import CommandStart

load_dotenv()

from create_bot import bot
from database.db_utils import db_register_user, db_update_user, db_create_user_cart, db_get_product_by_id, \
    db_get_user_cart, db_update_to_cart, db_get_product_by_name, db_insert_or_update_finally_cart, db_delete_product
from keyboards.inline_kb import generate_category_menu, show_product_by_category, generate_constructor_buttons, \
    generate_delete_product
from keyboards.reply_kb import share_phone_button, generate_main_menu, back_to_main_menu, back_arrow_button
from utils.caption import text_for_caption, counting_products_from_cart

users_router = Router()


@users_router.message(CommandStart())
async def command_start(message: Message):
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.from_user.full_name}</b>!\n –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ —à–∞—É—Ä–º—ã!')
    await start_register_user(message)


@users_router.message(F.contact)
async def update_user_info_finish_register(message: Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"""
    chat_id = message.chat.id
    phone = message.contact.phone_number
    db_update_user(chat_id, phone)
    if db_create_user_cart(chat_id):
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    await show_main_menu(message)


@users_router.message(F.text == '‚òë –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')
async def make_order(message: Message):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'"""
    chat_id = message.chat.id
    await bot.send_message(chat_id=chat_id, text='–ü–æ–≥–Ω–∞–ª–∏!', reply_markup=back_to_main_menu())
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=generate_category_menu(chat_id))


@users_router.message(F.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def return_to_main_menu(message: Message):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    await show_main_menu(message)


@users_router.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def return_to_category_menu(message: Message):
    """–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    await make_order(message)


@users_router.message(F.text == 'üóë –ö–æ—Ä–∑–∏–Ω–∞')
async def show_cart(message: Message):
    """–ü–æ–∫–∞–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üóë –ö–æ—Ä–∑–∏–Ω–∞'"""
    chat_id = message.chat.id
    context = counting_products_from_cart(chat_id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞')
    if context:
        count, text, *_ = context
        await bot.send_message(chat_id=chat_id, text=text, reply_markup=generate_delete_product(chat_id))
    else:
        await bot.send_message(chat_id=chat_id, text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üòî')
        await make_order(message)


@users_router.callback_query(F.data.regexp(r'category_[1-9]'))
async def show_product_button(call: CallbackQuery):
    """–ü–æ–∫–∞–∑ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    category_id = int(call.data.split('_')[-1])
    await bot.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç', chat_id=chat_id, message_id=message_id,
                                reply_markup=show_product_by_category(category_id))


@users_router.callback_query(F.data == 'return_to_category')
async def return_to_category_button(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    await bot.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', chat_id=chat_id, message_id=message_id,
                                reply_markup=generate_category_menu(chat_id))


@users_router.callback_query(F.data.contains('product_'))
async def show_product_detail(call: CallbackQuery):
    """–ü–æ–∫–∞–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    product_id = int(call.data.split('_')[-1])
    product = db_get_product_by_id(product_id)
    await bot.delete_message(chat_id=chat_id, message_id=message_id)

    if user_cart := db_get_user_cart(chat_id):
        db_update_to_cart(price=product.price, cart_id=user_cart.id)

        text = text_for_caption(product.product_name, product.description, product.price)

        await bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–µ—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä', reply_markup=back_arrow_button())
        await bot.send_photo(chat_id=chat_id, photo=FSInputFile(path=product.image), caption=text,
                             reply_markup=generate_constructor_buttons())
    else:
        await bot.send_message(chat_id=chat_id, text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –Ω–∞—Å –Ω–µ—Ç, –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞',
                               reply_markup=share_phone_button())


@users_router.callback_query(F.data.regexp(r'action [+-]'))
async def constructor_change(call: CallbackQuery):
    """–õ–æ–≥–∏–∫–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞"""
    chat_id = call.from_user.id
    message_id = call.message.message_id
    action = call.data.split()[-1]
    product_name = call.message.caption.split('\n')[0]
    user_cart = db_get_user_cart(chat_id)
    product = db_get_product_by_name(product_name)
    product_price = product.price

    match action:
        case '+':
            user_cart.total_products += 1
            product_price = product_price * user_cart.total_products
            db_update_to_cart(price=product_price, quantity=user_cart.total_products, cart_id=user_cart.id)
        case '-':
            if user_cart.total_products < 2:
                await call.answer('–ú–µ–Ω—å—à–µ –æ–¥–Ω–æ–≥–æ –Ω–µ–ª—å–∑—è')
            else:
                user_cart.total_products -= 1
            product_price = product_price * user_cart.total_products
            db_update_to_cart(price=product_price, quantity=user_cart.total_products, cart_id=user_cart.id)

    text = text_for_caption(name=product_name, description=product.description, price=product_price)

    try:
        await bot.edit_message_media(chat_id=chat_id, message_id=message_id,
                                     media=InputMediaPhoto(media=FSInputFile(path=product.image), caption=text),
                                     reply_markup=generate_constructor_buttons(user_cart.total_products))
    except TelegramBadRequest as e:
        print(e)


@users_router.callback_query(F.data == 'put into cart')
async def put_into_cart(call: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    chat_id = call.from_user.id
    message_id = call.message.message_id
    product_name = call.message.caption.split('\n')[0]
    cart = db_get_user_cart(chat_id)
    await bot.delete_message(chat_id=chat_id, message_id=message_id)

    if db_insert_or_update_finally_cart(cart_id=cart.id, product_name=product_name, total_products=cart.total_products,
                                        total_price=cart.total_price):
        await bot.send_message(chat_id=chat_id, text='–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ')
    else:
        await bot.send_message(chat_id=chat_id, text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ ‚úèÔ∏è')

    await return_to_category_menu(call.message)


@users_router.callback_query(F.data == '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞')
async def show_finally_cart(call: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã"""
    chat_id = call.from_user.id
    context = counting_products_from_cart(chat_id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞')
    if context:
        count, text, *_ = context
        await bot.send_message(chat_id=chat_id, text=text, reply_markup=generate_delete_product(chat_id))
    else:
        await bot.send_message(chat_id=chat_id, text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üòî')
        await make_order(call.message)


@users_router.callback_query(F.data.regexp(r'delete_\d+'))
async def delete_cart_product(call: CallbackQuery):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∫—Ä–µ—Å—Ç–∏–∫–æ–º"""
    finally_id = int(call.data.split('_')[-1])
    db_delete_product(finally_id)
    await bot.answer_callback_query(callback_query_id=call.id, text='–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω!')
    await show_finally_cart(call)


@users_router.callback_query(F.data == 'order_pay')
async def create_order(call: CallbackQuery):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    chat_id = call.from_user.id
    message_id = call.message.message_id
    await bot.delete_message(chat_id=chat_id, message_id=message_id)

    count, text, total_price, cart_id = counting_products_from_cart(chat_id=chat_id,
                                                                    user_text='–ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã')
    text += '\n–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É: 10000 —Å—É–º–º'
    text = text.replace('<b>', '').replace('</b>', '')

    await bot.send_invoice(chat_id=chat_id, title='–í–∞—à –∑–∞–∫–∞–∑', description=text, payload='bot-defined invoice payload',
                           provider_token=os.getenv('PAYMENT_TEST'), currency='UZS',
                           prices=[LabeledPrice(label='–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', amount=int(total_price * 100)),
                                   LabeledPrice(label='–î–æ—Å—Ç–∞–≤–∫–∞', amount=10000 * 100)])


async def start_register_user(message: Message):
    """–ü–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ"""
    full_name = message.from_user.full_name
    chat_id = message.chat.id
    if db_register_user(full_name=full_name, chat_id=chat_id):
        await message.answer(f'–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, <b>{full_name}</b>!')
        await show_main_menu(message)
    else:
        await message.answer('–î–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏, –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.',
                             reply_markup=share_phone_button())


async def show_main_menu(message: Message):
    """–°–¥–µ–ª–∞—Ç—å –ó–∞–∫–∞–∑, –ò—Å—Ç–æ—Ä–∏—è, –ö–æ—Ä–∑–∏–Ω–∞, –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=generate_main_menu())


